class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {       // 63 cases o(n2)
        // int n=nums.size();
        // int count=0;
        // for(int i=0;i<n;i++){
        //    for(int j=i+1;j<n;j++){
        //     if(nums[j]==nums[i]){
        //         count++;
        //     }
        //    }
        // }
        // if(count==0){
        //     return false;
        // }
        // else{
        //     return true;
        // }

        // accepted better solution o(n log n)
        // sort(nums.begin(),nums.end());
        // for(size_t i=1;i<nums.size();i++){
        //     if(nums[i]==nums[i-1]){
        //         return true;
        //     }
        // }
        // return false;
        
        // unorderd_Set
        int n=nums.size();
        unordered_set<int>mpp;
        for(int i=0;i<n;i++){
            if(mpp.find(nums[i])!=mpp.end()){
                return true;
            }
            mpp.insert(nums[i]);
        }
        return false;
    }
};